#!/bin/bash
###############################################################
# simpleX                                                     #
# A simple file explorer using index to browse under terminal #
# Version: 2.0                                                #
# Author: b2ns                                                #
###############################################################

#set default path
[ "$#" != "0" ] && cd "$1" || cd $PWD

#declare global variable and temp file
linecount=""

hidden=false
detail=false
mark=false

clipboard=""
copycut=""
pastepath=""

markpath=""
#prepath=""

cmd=""
parameters=""
lastInput=""

filelist=/tmp/simplex.filelist.$$
detaillist=/tmp/simplex.detaillist.$$
clipboardlist=/tmp/simplex.clipboardlist.$$
findlist=/tmp/simplex.findlist.$$
#morelist=/tmp/simplex.morelist.$$

#trap 'rm -f $filelist $detaillist $clipboardlist $findlist $morelist' EXIT
trap 'rm -f $filelist $detaillist $clipboardlist $findlist' EXIT

#define function
showList()
{
  clear
  [ "$PWD" = "$markpath" ] && echo -e "\033[1;36mmarked directory\033[0m"

  if [ -s "$findlist" ];then
	cp $findlist $filelist
	:>$findlist
	detail=false
	echo -e "\033[1;36msearch result:\033[0m"
  elif [ "$hidden" = "false" ] && [ "$detail" = "false" ];then
	ls > $filelist
  elif [ "$hidden" = "true" ] && [ "$detail" = "true" ];then
	ls -alh > $detaillist && sed -i '1d' $detaillist
	ls -a > $filelist
  elif [ "$hidden" = "true" ];then
	ls -a > $filelist
  else
	ls -lh > $detaillist && sed -i '1d' $detaillist
	ls > $filelist
  fi

  linecount=$(sed -n '$=' $filelist)

  index=1
  if [ "$detail" = "false" ];then
	while read name
	do
	  if [ -L "$name" ];then
		echo -e "[\033[1;32m$index\033[0m] \033[1;36m$name\033[0m" #>> $morelist
	  elif [ -d "$name" ];then
		echo -e "[\033[1;32m$index\033[0m] \033[1;34m$name\033[0m" #>> $morelist
	  elif [ -x "$name" ];then
		echo -e "[\033[1;32m$index\033[0m] \033[1;32m$name\033[0m" #>> $morelist
	  else
		echo -e "[\033[1;32m$index\033[0m] \033[0m$name\033[0m" #>> $morelist
	  fi
	  index=$((index+1))
	done < $filelist
  else
	while read name
	do
	  echo -e "[\033[1;37m$index\033[0m] \033[0m$name\033[0m" #>> $morelist
	  index=$((index+1))
	done < $detaillist
  fi

  #more -d $morelist
  #:> $morelist
  echo
}

isNumber()
{
  expr "$1" + 1 &> /dev/null && return 0 || return 1
}

noPara()
{
  if [ "$cmd" = "$parameters" ];then
	echo -e "\033[1;31mneed parameters !\033[0m"
	read -es -n1 -t1
	return 0
  fi
  return 1
}

paraCheck()
{
  parameters=$(echo "$parameters" | sed 's/*//g')
}

numCheck()
{
  if isNumber "$1" && [ "$1" -gt "0" ] && [ "$1" -le "$linecount" ];then
	return 0
  else
	echo -e "\033[1;31m$1 is out of range! please use index between 1~$linecount !\033[0m"
	read -es -n1 -t1
	return 1
  fi
}

existCheck()
{
  if [ -e "$1" ];then
	echo -e "\033[1;31m$1 already exists !\033[0m"
	read -es -n1 -t1
	return 1
  fi
  return 0
}

selectAll()
{
  if [ "${parameters%% *}" = "*" ];then
	parameters=$(seq $linecount)
	return 0
  fi
  return 1
}

Mkfile()
{
  noPara && return 1
  paraCheck

  for name in $parameters
  do
	if existCheck $name;then
	  touch $name
	fi
  done

  return 0
}

Mkdir()
{
  noPara && return 1
  paraCheck

  for name in $parameters
  do
	if existCheck $name;then
	  mkdir $name
	fi
  done

  return 0
}

Mklink()
{
  noPara && return 1
  selectAll
  paraCheck

  for num in $parameters
  do
	if numCheck $num;then
	  filename=$(sed -n ${num}p $filelist)
	  if existCheck "${filename}.link";then
		ln -s "$PWD/$filename" "${filename}.link"
	  fi
	fi
  done
  return 0
}

Delete()
{
  noPara && return 1

  all=false
  selectAll && all=true
  paraCheck

  for num in $parameters
  do
	if numCheck $num;then
	  filename=$(sed -n ${num}p $filelist)
	  if [ "$all" = "false" ];then
		echo -e "\033[1;35m"$filename"\033[0m\033[1;37m will be deleted ? (y/n): \033[0m\c"
		read -r yesno
		[ "$yesno" = "y" ] && (rm "$filename" || rmdir "$filename")
	  else
		rm "$filename" || rmdir "$filename"
	  fi
	fi
  done
  return 0
}

CopyCut()
{
  noPara && return 1

  copycut="$1"
  pastepath="$PWD"
  cp $filelist $clipboardlist
  clipboard=""
  filename=""

  selectAll
  paraCheck

  for num in $parameters
  do
	if numCheck $num;then
	  clipboard="$clipboard $num"
	  name=$(sed -n ${num}p $filelist)
	  filename="$filename\n$name"
	fi
  done

  if [ "$filename" != "" ] ;then
	echo -e "\033[1;35m"$filename"\033[0m"
	echo
	if [ "$copycut" = "copy" ];then
	  echo -e "\033[1;37mhas been copied to the clipboard !\033[0m"
	else
	  echo -e "\033[1;37mhas been cut to the clipboard !\033[0m"
	fi
  fi
  return 0
}

Paste()
{
  if [ "$clipboard" = "" ];then
	  echo -e "\033[1;31mclipboard is empty !\033[0m"
	  read -es -n1 -t1
	  return 1
  fi

  ignore=false
  override=false
  rename=false
  choich=""
  yesno=""

  for num in $clipboard
  do
	filename=$(sed -n ${num}p $clipboardlist)
	copyname="$filename"

	if [ "$rename" = "false" ] && [ "$override" = "false" ] && [ "$ignore" = "false" ] && [ -e "$copyname" ];then
		echo -e "\033[1;31m$copyname already exists !\033[0m"
		echo -e "\033[1;37m ignore,override or rename ? (i/o/r): \033[0m\c"
		read  -r choich
		echo -e "\033[1;37m use the same stratege for the rest of files ? (y/n): \033[0m\c"
		read -r yesno
		if [ "$yesno" = "y" ];then
		  case "$choich" in
			"r" )
			  rename=true;;
			"o" )
			  override=true;;
			"i" )
			  ignore=true;;
		  esac
		fi
	fi

	if [ "$choich" = "r" ] || [ "$rename" = "true" ];then
	  i=0
	  while [ -e "$copyname" ];do
		if [ "$filename" != "${filename%%.*}" ];then
		  copyname="${filename%%.*}_$i.${filename#*.}"
		else
		  copyname="${filename}_$i"
		fi
		i=$((i+1))
	  done
	fi

	if ! [ -e "$copyname" ] || ([ "$choich" != "i" ] && [ "$ignore" != "true" ]);then
	  if [ "$copycut" = "copy" ];then
		cp "$pastepath/$filename" "./$copyname"
	  else
		mv "$pastepath/$filename" "./$copyname"
	  fi
	fi

  done

  if [ "$copycut" = "cut" ];then
	clipboard=""
  fi
  return 0
}

Rename()
{
  noPara && return 1

  while :
  do
	num=${parameters%% *}
	parameters=${parameters#* }
	newname=${parameters%% *}
	parameters=${parameters#* }
	if numCheck $num;then
	  oldname=$(sed -n ${num}p $filelist)
	  if existCheck $newname;then
		mv "$oldname" "$newname"
	  fi
	  tmp=${parameters%% *}
	  [ "$parameters" = "$tmp" ] && break
	else
	  break
	fi
  done
  return 0
}

Search()
{
  noPara && return 1

  parameters=${parameters%% *}
  find ./ -mount -maxdepth 1 -iname "$parameters" > $findlist
  sed -i 's/^..//' $findlist

  if [ -s "$findlist" ];then
	return 0
  else
	echo -e "\033[1;31mno such file !\033[0m"
	return 1
  fi
}

Pack()
{
  noPara && return 1

  pkgname=${parameters%% *}
  pkgname=$(echo "$pkgname" | sed 's/*//g')

  if existCheck $pkgname;then
	pkgname=$pkgname
  else
	return 1
  fi

  pkgformat=${pkgname##*.}
  tmp=${pkgname%.*}
  istar=${tmp##*.}

  if [ "$pkgformat" != "zip" ] && ([ "$istar" != "tar" ] || ([ "$pkgformat" != "gz" ] && [ "$pkgformat" != "bz2" ] && [ "$pkgformat" != "xz" ]));then
	echo -e "\033[1;31mthe format of compressed file must be :\n*.zip *.tar.gz *.tar.bz2 *.tar.xz !\033[0m"
	read -es -n1 -t1
	return 1
  fi

  parameters=${parameters#* }
  selectAll
  paraCheck

  i=0
  for num in $parameters
  do
	if numCheck $num;then
	  filename=$(sed -n ${num}p $filelist)
	  array[$i]="$filename"
	  i=$((i+1))
	else
	  return 1
	fi
  done
  
  case "$pkgformat" in
	"gz" )
	  tar -zcvf "$pkgname" "${array[@]}";;
	"bz2" )
	  tar -jcvf "$pkgname" "${array[@]}";;
	"xz" )
	  tar -Jcvf "$pkgname" "${array[@]}";;
	"zip" )
	  zip -r "$pkgname" "${array[@]}";;
  esac

  for((j=0;j<i;j++));do
	array[$j]=""
  done
  return 0
}

Unpack()
{
  noPara && return 1

  selectAll
  paraCheck

  for num in $parameters
  do
	if numCheck $num;then
	  filename=$(sed -n ${num}p $filelist)
	  pkgformat=${filename##*.}
	  if [ "$filename" = "$pkgformat" ] ;then
		echo -e "\033[1;35m$filename \033[0m\033[1;31mcan't be decompressed !\033[0m"
		read -es -n1 -t1
		continue
	  fi

	  dirname=${filename%%.*}

	  if existCheck $dirname;then
		mkdir "$dirname"
	  else
		continue
	  fi

	  case "$pkgformat" in
		"gz" )
		  tar -zxvf "$filename" -C "$dirname";;
		"bz2" )
		  tar -jxvf "$filename" -C "$dirname";;
		"xz" )
		  tar -Jxvf "$filename" -C "$dirname";;
		"zip" )
		  unzip -d "$dirname" "$filename";;
		* )
		  rmdir "$dirname"
		echo -e "\033[1;35m$filename \033[0m\033[1;31mcan't be decompressed !\033[0m"
		read -es -n1 -t1
		;;
	  esac
	fi
  done
  return 0
}

Play()
{
  ./"$filename" 2> /dev/null || xdg-open "$filename" 2> /dev/null || echo -e "\033[1;31mcan't open \033[0m\033[1;35m$filename\033[0m\033[1;31m using default App !\nyou may choose another App to open it by inputting :\033[0m\n               AppName index"
  read -es -n1 -t1 
}
cmdPlay()
{
  #prefix="n"
  #filenum=$(echo $parameters | grep -o "$prefix[0-9]\{1,\}")
  filenum=$(echo $parameters | grep -o "[0-9]\{1,\}")
  for num in $filenum
  do
	#num=${num#?}
	if numCheck $num;then
	  filename=$(sed -n ${num}p $filelist)
	  #parameters=$(echo $parameters | sed "s/$prefix[0-9]\{1,\}/$filename/")
	  parameters=$(echo $parameters | sed "s/[0-9]\{1,\}/$filename/")
	else
	  return 1
	fi
  done

  if Alias;then
	echo
  elif [ "$cmd" = "$parameters" ];then
	$cmd
  else
	CMD="$cmd $parameters"
	eval $CMD
  fi

  read -es -n1
  return 0
}

Browser()
{
  showList

  while :
  do
	#echo -e "\033[1;32m$USER@$HOSTNAME\033[0m:\033[1;34m$PWD\033[0m$ \c"
	echo -e "\033[1;32m$USER@\033[0m\033[1;35msimpleX\033[0m:\033[1;34m$PWD\033[0m$"
	read -e -p "> " input
	if [ "$input" = "" ];then
	  input=$lastInput
	else
	  lastInput=$input
	fi

	cmd=${input%% *}
	parameters=${input#* }

	if isNumber "$cmd"
	then
	  if [ "$cmd" -gt "$linecount" ] || [ "$cmd" -le "0" ]
	  then
		echo -e "\033[1;31mout of range !\033[0m"
		echo -e "\033[1;31mplease use index between 1~$linecount !\033[0m"
		read -es -n1 -t1
	  else
		filename=$(sed -n ${cmd}p $filelist)
		[ -d "$filename" ] && cd "$filename" && showList || Play
	  fi
	elif [ "$cmd" = "" ] 
	then
	  continue
	elif [ "$cmd" = ".." ] || [ "$cmd" = "u" ]
	then
	  cd ..
	  showList
	elif [ "$cmd" = "-" ] || [ "$cmd" = "b" ]
	then
	  cd -
	  showList
	elif [ "$cmd" = "." ] || [ "$cmd" = "r" ]
	then
	  showList
	elif [ "$cmd" = "/" ] || [ "$cmd" = "root" ] 
	then
	  cd /
	  showList
	elif [ "$cmd" = "~" ] || [ "$cmd" = "home" ] 
	then
	  cd ~
	  showList
	elif [ "$cmd" = "m" ] || [ "$cmd" = "mark" ] 
	then
	  prepath="$markpath"
	  markpath="$PWD"
	  echo -e "\033[1;37mthis directory has been marked !\033[0m"
	  read -es -n1 -t1
	elif [ "$cmd" = "g" ] || [ "$cmd" = "goto" ] 
	then
	  if [ "$markpath" != "" ];then
		#[ "$PWD" != "$markpath" ] && prepath="$PWD" && cd "$markpath" || cd $prepath
		cd "$markpath"
		showList
	  else
		echo -e "\033[1;31mno directory is marked !\033[0m"
		read -es -n1 -t1
	  fi
	elif [ "$cmd" = "a" ] || [ "$cmd" = "all" ] 
	then
	  [ "$hidden" = "true" ] && hidden=false || hidden=true
	  showList
	elif [ "$cmd" = "ll" ]
	then
	  [ "$detail" = "true" ] && detail=false || detail=true
	  showList
	elif [ "$cmd" = "p" ] || [ "$cmd" = "paste" ] 
	then
	  Paste && showList
	elif [ "$cmd" = "q" ] || [ "$cmd" = "quit" ] || [ "$cmd" = "exit" ] 
	then
	  clear
	  break
	elif [ "$cmd" = "mkf" ] 
	then
	  Mkfile && showList
	elif [ "$cmd" = "mkd" ] 
	then
	  Mkdir && showList
	elif [ "$cmd" = "mkl" ] 
	then
	  Mklink && showList
	elif [ "$cmd" = "del" ]
	then
	  Delete && showList
	elif [ "$cmd" = "co" ] || [ "$cmd" = "copy" ] 
	then
	  CopyCut "copy"
	elif [ "$cmd" = "cu" ] || [ "$cmd" = "cut" ]
	then
	  CopyCut "cut"
	elif [ "$cmd" = "rn" ]
	then
	  Rename && showList
	elif [ "$cmd" = "se" ] || [ "$cmd" = "fi" ]
	then
	  Search && showList
	elif [ "$cmd" = "pack" ] 
	then
	  Pack && showList
	elif [ "$cmd" = "unpack" ] 
	then
	  Unpack && showList
	else
	  cmdPlay && showList
	fi
  done
}

Alias(){
#Custom aliases
  if [ "$cmd" = "v" ];then
	gvim $parameters
	return 0
  fi

  if [ "$cmd" = "gs" ];then
	git status
	return 0
  fi

  if [ "$cmd" = "gd" ];then
	git diff "$parameters"
	return 0
  fi

  if [ "$cmd" = "ga" ];then
	git add .
	return 0
  fi

  if [ "$cmd" = "gc" ];then
	git commit -m "$parameters"
	return 0
  fi

  if [ "$cmd" = "gp" ];then
	git push origin master
	return 0
  fi

  if [ "$cmd" = "gg" ];then
	git add .
	git commit -m "$parameters"
	git push origin master
	return 0
  fi

  return -1
#Custom aliases
}

#main function
Browser

exit 0
